name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]
jobs:
    jobs_0:    
      name: Elementos del sistema
      runs-on: ubuntu-latest
      steps:
        - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
        - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
        - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
    jobs_1:         
      name: Chequear repositorio
      runs-on: ubuntu-latest
      steps:
        - name: Check out repository code
          uses: actions/checkout@v4
        - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
        - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
  
        - name: List files in the repository
          run: |
            ls ${{ github.workspace }}
        - run: echo "üçè This job's status is ${{ job.status }}."
      
        - name: Set up JDK 17       
          uses: actions/setup-java@v3
          with:          
            java-version: '17'
            distribution: 'temurin'
            cache: maven
        - run: echo "JDK asignada"
        
        - name: Ejecutar Maven
          run: mvn -B package --file ${{ github.workspace }}/pom.xml
        - run: echo "MAVEN lanzado"

        # Con lo que acaba de crear Maven
        - name: Crear Artefact
          uses: actions/upload-artifact@v2
          with:
            name: bundle
            path: target #Path de los ficheros de recursos manualmente que serin incluidos en el zip           
            #path: ${{ github.workspace }}/target/ #Path de los ficheros de recursos manualmente que serin incluidos en el zip
        - run: echo "Artefacto creado" 
        - name: Display structure of downloaded files
          run: ls -R target
    
    jobs_2:
      needs: jobs_1 #Dependencia  
      name: Artefacto
      runs-on: ubuntu-latest
      steps:
        - name: Check out repository code
          uses: actions/checkout@v4
        - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
        - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
           # Creamos un fichero que crear√° su propio artefacto 
           # - name: Create a File
        - run: echo "hello from Github Actions" > saludo.txt        
        - name: Upload Artifact
          uses: actions/upload-artifact@v4
          with:
                name: my-artifact                
                path: saludo.txt
        
        # Si no hacemos checkout antes de la operaci√≥n no accede correctamente al repositorio
        # Creamos el artefacto con el fichero o contenido de la carpeta que indicamos en el path
        - name: Crear Artefact
          uses: actions/upload-artifact@v2
          with:
            name: bundle2
            path: target #Path de los ficheros de recursos manualmente que serin incluidos en el zip           
            #path: ${{ github.workspace }}/target/ #Path de los ficheros de recursos manualmente que serin incluidos en el zip
        - run: echo "Artefacto creado" 
        - name: Display structure of downloaded files
          run: ls -R target
          
    jobs_3: 
       needs: jobs_2
       runs-on: ubuntu-latest
       if: | #Esperar que termine el job indicado
           always() &&  (needs.jobs_2.result == 'success')
       steps:
           - name: Sleep for 30 seconds
             uses: jakejarvis/wait-action@master
             with:
                 time: '30s' # Esperar para asegurar el artifact
           - name: Check out repository code
             uses: actions/checkout@v4
           - name: Download All Artifacts
             uses: actions/download-artifact@v4
             with:
               name: my-artifact
               path: .
               #pattern: d* 
           - run: cat saludo.txt 	

    jobs_4: 
       needs: jobs_2
       runs-on: ubuntu-latest
       if: | #Esperar que termine el job indicado
           always() &&  (needs.jobs_2.result == 'success')
       steps:
           - run: cat saludo.txt 	     
       
# Actions
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
# Ejemplos
# https://stackoverflow.com/questions/68945610/how-to-put-conditional-job-in-need-of-another-job-in-github-action
# https://github.com/actions/download-artifact/blob/main/README.md#v4---whats-new
